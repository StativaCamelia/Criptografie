import bitstring
seed = '00100001101010100011111110011100'
primitive_equation = '0xB4BCD35C'
mask_binary = bin(int(primitive_equation, 16))[2:].zfill(32)


def lsfr(seed, mask_binary):
    random_num = ""
    for _ in range(10):
        sum = 0
        for bits_mask, bits_seed in zip(mask_binary, seed):
            if bits_mask == '1':
                sum += int(bits_seed)
        feedback = sum %2
        seed_int=int(seed,2)
        seed = (seed_int>>1)
        seed = bin(seed)[2:].zfill(32)
        seed_list = list(seed)
        seed_list[0] = str(feedback)
        seed = "".join(seed_list)
        random_num +=seed
    return random_num

if __name__ == '__main__':
    print(lsfr(seed, mask_binary))
